// Code generated by protoc-gen-go. DO NOT EDIT.
// source: umbrella.proto

/*
Package umbrella is a generated protocol buffer package.

It is generated from these files:
	umbrella.proto

It has these top-level messages:
	Umbrella
	Record
	GetAllUmbRequest
	GetAllumbResponse
	BorrowOneRequest
	BorrowOneResponse
	ReturnRequest
	ReturnResponse
	GetRecordsByStdnoRequest
	GetRecordsByStdnoResponse
	GetRecordsByNumRequest
	GetRecordsByNumResponse
	AddUmbrellaRequest
	AddUmbrellaResponse
*/
package umbrella

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Umbrella struct {
	Number string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Rented bool   `protobuf:"varint,2,opt,name=rented" json:"rented,omitempty"`
}

func (m *Umbrella) Reset()                    { *m = Umbrella{} }
func (m *Umbrella) String() string            { return proto.CompactTextString(m) }
func (*Umbrella) ProtoMessage()               {}
func (*Umbrella) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Umbrella) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Umbrella) GetRented() bool {
	if m != nil {
		return m.Rented
	}
	return false
}

type Record struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Stdno     string `protobuf:"bytes,2,opt,name=stdno" json:"stdno,omitempty"`
	Place     string `protobuf:"bytes,3,opt,name=place" json:"place,omitempty"`
	Number    string `protobuf:"bytes,4,opt,name=number" json:"number,omitempty"`
	HasReturn bool   `protobuf:"varint,5,opt,name=hasReturn" json:"hasReturn,omitempty"`
	CreateAt  int64  `protobuf:"varint,6,opt,name=createAt" json:"createAt,omitempty"`
	ReturnAt  int64  `protobuf:"varint,7,opt,name=returnAt" json:"returnAt,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Record) GetStdno() string {
	if m != nil {
		return m.Stdno
	}
	return ""
}

func (m *Record) GetPlace() string {
	if m != nil {
		return m.Place
	}
	return ""
}

func (m *Record) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Record) GetHasReturn() bool {
	if m != nil {
		return m.HasReturn
	}
	return false
}

func (m *Record) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Record) GetReturnAt() int64 {
	if m != nil {
		return m.ReturnAt
	}
	return 0
}

type GetAllUmbRequest struct {
}

func (m *GetAllUmbRequest) Reset()                    { *m = GetAllUmbRequest{} }
func (m *GetAllUmbRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllUmbRequest) ProtoMessage()               {}
func (*GetAllUmbRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetAllumbResponse struct {
	Umbrellas []*Umbrella `protobuf:"bytes,1,rep,name=umbrellas" json:"umbrellas,omitempty"`
}

func (m *GetAllumbResponse) Reset()                    { *m = GetAllumbResponse{} }
func (m *GetAllumbResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllumbResponse) ProtoMessage()               {}
func (*GetAllumbResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetAllumbResponse) GetUmbrellas() []*Umbrella {
	if m != nil {
		return m.Umbrellas
	}
	return nil
}

type BorrowOneRequest struct {
	Stdno  string `protobuf:"bytes,1,opt,name=stdno" json:"stdno,omitempty"`
	Place  string `protobuf:"bytes,2,opt,name=place" json:"place,omitempty"`
	Number string `protobuf:"bytes,3,opt,name=number" json:"number,omitempty"`
}

func (m *BorrowOneRequest) Reset()                    { *m = BorrowOneRequest{} }
func (m *BorrowOneRequest) String() string            { return proto.CompactTextString(m) }
func (*BorrowOneRequest) ProtoMessage()               {}
func (*BorrowOneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BorrowOneRequest) GetStdno() string {
	if m != nil {
		return m.Stdno
	}
	return ""
}

func (m *BorrowOneRequest) GetPlace() string {
	if m != nil {
		return m.Place
	}
	return ""
}

func (m *BorrowOneRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type BorrowOneResponse struct {
}

func (m *BorrowOneResponse) Reset()                    { *m = BorrowOneResponse{} }
func (m *BorrowOneResponse) String() string            { return proto.CompactTextString(m) }
func (*BorrowOneResponse) ProtoMessage()               {}
func (*BorrowOneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ReturnRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReturnRequest) Reset()                    { *m = ReturnRequest{} }
func (m *ReturnRequest) String() string            { return proto.CompactTextString(m) }
func (*ReturnRequest) ProtoMessage()               {}
func (*ReturnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReturnRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReturnResponse struct {
}

func (m *ReturnResponse) Reset()                    { *m = ReturnResponse{} }
func (m *ReturnResponse) String() string            { return proto.CompactTextString(m) }
func (*ReturnResponse) ProtoMessage()               {}
func (*ReturnResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetRecordsByStdnoRequest struct {
	Stdno string `protobuf:"bytes,1,opt,name=stdno" json:"stdno,omitempty"`
}

func (m *GetRecordsByStdnoRequest) Reset()                    { *m = GetRecordsByStdnoRequest{} }
func (m *GetRecordsByStdnoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRecordsByStdnoRequest) ProtoMessage()               {}
func (*GetRecordsByStdnoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetRecordsByStdnoRequest) GetStdno() string {
	if m != nil {
		return m.Stdno
	}
	return ""
}

type GetRecordsByStdnoResponse struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *GetRecordsByStdnoResponse) Reset()                    { *m = GetRecordsByStdnoResponse{} }
func (m *GetRecordsByStdnoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRecordsByStdnoResponse) ProtoMessage()               {}
func (*GetRecordsByStdnoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetRecordsByStdnoResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type GetRecordsByNumRequest struct {
	Number string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
}

func (m *GetRecordsByNumRequest) Reset()                    { *m = GetRecordsByNumRequest{} }
func (m *GetRecordsByNumRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRecordsByNumRequest) ProtoMessage()               {}
func (*GetRecordsByNumRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetRecordsByNumRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type GetRecordsByNumResponse struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *GetRecordsByNumResponse) Reset()                    { *m = GetRecordsByNumResponse{} }
func (m *GetRecordsByNumResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRecordsByNumResponse) ProtoMessage()               {}
func (*GetRecordsByNumResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetRecordsByNumResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type AddUmbrellaRequest struct {
	Number string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
}

func (m *AddUmbrellaRequest) Reset()                    { *m = AddUmbrellaRequest{} }
func (m *AddUmbrellaRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUmbrellaRequest) ProtoMessage()               {}
func (*AddUmbrellaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AddUmbrellaRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type AddUmbrellaResponse struct {
}

func (m *AddUmbrellaResponse) Reset()                    { *m = AddUmbrellaResponse{} }
func (m *AddUmbrellaResponse) String() string            { return proto.CompactTextString(m) }
func (*AddUmbrellaResponse) ProtoMessage()               {}
func (*AddUmbrellaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*Umbrella)(nil), "Umbrella")
	proto.RegisterType((*Record)(nil), "Record")
	proto.RegisterType((*GetAllUmbRequest)(nil), "GetAllUmbRequest")
	proto.RegisterType((*GetAllumbResponse)(nil), "GetAllumbResponse")
	proto.RegisterType((*BorrowOneRequest)(nil), "BorrowOneRequest")
	proto.RegisterType((*BorrowOneResponse)(nil), "BorrowOneResponse")
	proto.RegisterType((*ReturnRequest)(nil), "ReturnRequest")
	proto.RegisterType((*ReturnResponse)(nil), "ReturnResponse")
	proto.RegisterType((*GetRecordsByStdnoRequest)(nil), "GetRecordsByStdnoRequest")
	proto.RegisterType((*GetRecordsByStdnoResponse)(nil), "GetRecordsByStdnoResponse")
	proto.RegisterType((*GetRecordsByNumRequest)(nil), "GetRecordsByNumRequest")
	proto.RegisterType((*GetRecordsByNumResponse)(nil), "GetRecordsByNumResponse")
	proto.RegisterType((*AddUmbrellaRequest)(nil), "AddUmbrellaRequest")
	proto.RegisterType((*AddUmbrellaResponse)(nil), "AddUmbrellaResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Lend service

type LendClient interface {
	GetAllUmb(ctx context.Context, in *GetAllUmbRequest, opts ...client.CallOption) (*GetAllumbResponse, error)
	BorrowOne(ctx context.Context, in *BorrowOneRequest, opts ...client.CallOption) (*BorrowOneResponse, error)
	ReturnOne(ctx context.Context, in *ReturnRequest, opts ...client.CallOption) (*ReturnResponse, error)
	GetRecordsByNum(ctx context.Context, in *GetRecordsByNumRequest, opts ...client.CallOption) (*GetRecordsByNumResponse, error)
	GetRecordsByStdno(ctx context.Context, in *GetRecordsByStdnoRequest, opts ...client.CallOption) (*GetRecordsByStdnoResponse, error)
	AddUmbrella(ctx context.Context, in *AddUmbrellaRequest, opts ...client.CallOption) (*AddUmbrellaResponse, error)
}

type lendClient struct {
	c           client.Client
	serviceName string
}

func NewLendClient(serviceName string, c client.Client) LendClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "lend"
	}
	return &lendClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *lendClient) GetAllUmb(ctx context.Context, in *GetAllUmbRequest, opts ...client.CallOption) (*GetAllumbResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Lend.GetAllUmb", in)
	out := new(GetAllumbResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendClient) BorrowOne(ctx context.Context, in *BorrowOneRequest, opts ...client.CallOption) (*BorrowOneResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Lend.BorrowOne", in)
	out := new(BorrowOneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendClient) ReturnOne(ctx context.Context, in *ReturnRequest, opts ...client.CallOption) (*ReturnResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Lend.ReturnOne", in)
	out := new(ReturnResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendClient) GetRecordsByNum(ctx context.Context, in *GetRecordsByNumRequest, opts ...client.CallOption) (*GetRecordsByNumResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Lend.GetRecordsByNum", in)
	out := new(GetRecordsByNumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendClient) GetRecordsByStdno(ctx context.Context, in *GetRecordsByStdnoRequest, opts ...client.CallOption) (*GetRecordsByStdnoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Lend.GetRecordsByStdno", in)
	out := new(GetRecordsByStdnoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendClient) AddUmbrella(ctx context.Context, in *AddUmbrellaRequest, opts ...client.CallOption) (*AddUmbrellaResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Lend.AddUmbrella", in)
	out := new(AddUmbrellaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lend service

type LendHandler interface {
	GetAllUmb(context.Context, *GetAllUmbRequest, *GetAllumbResponse) error
	BorrowOne(context.Context, *BorrowOneRequest, *BorrowOneResponse) error
	ReturnOne(context.Context, *ReturnRequest, *ReturnResponse) error
	GetRecordsByNum(context.Context, *GetRecordsByNumRequest, *GetRecordsByNumResponse) error
	GetRecordsByStdno(context.Context, *GetRecordsByStdnoRequest, *GetRecordsByStdnoResponse) error
	AddUmbrella(context.Context, *AddUmbrellaRequest, *AddUmbrellaResponse) error
}

func RegisterLendHandler(s server.Server, hdlr LendHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Lend{hdlr}, opts...))
}

type Lend struct {
	LendHandler
}

func (h *Lend) GetAllUmb(ctx context.Context, in *GetAllUmbRequest, out *GetAllumbResponse) error {
	return h.LendHandler.GetAllUmb(ctx, in, out)
}

func (h *Lend) BorrowOne(ctx context.Context, in *BorrowOneRequest, out *BorrowOneResponse) error {
	return h.LendHandler.BorrowOne(ctx, in, out)
}

func (h *Lend) ReturnOne(ctx context.Context, in *ReturnRequest, out *ReturnResponse) error {
	return h.LendHandler.ReturnOne(ctx, in, out)
}

func (h *Lend) GetRecordsByNum(ctx context.Context, in *GetRecordsByNumRequest, out *GetRecordsByNumResponse) error {
	return h.LendHandler.GetRecordsByNum(ctx, in, out)
}

func (h *Lend) GetRecordsByStdno(ctx context.Context, in *GetRecordsByStdnoRequest, out *GetRecordsByStdnoResponse) error {
	return h.LendHandler.GetRecordsByStdno(ctx, in, out)
}

func (h *Lend) AddUmbrella(ctx context.Context, in *AddUmbrellaRequest, out *AddUmbrellaResponse) error {
	return h.LendHandler.AddUmbrella(ctx, in, out)
}

func init() { proto.RegisterFile("umbrella.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0xb4, 0x9d, 0xe6, 0xc3, 0xaf, 0x22, 0x4d, 0x5e, 0x4a, 0xbb, 0xb5, 0x90, 0x08, 0x7b, 0x21,
	0x07, 0xb4, 0xaa, 0x0a, 0xa7, 0xaa, 0x42, 0x4a, 0x0f, 0xf4, 0x52, 0x81, 0xb4, 0xa8, 0xdc, 0x93,
	0xec, 0x93, 0x88, 0xe4, 0xd8, 0x61, 0xbd, 0x16, 0xe2, 0x6f, 0xf1, 0xdb, 0xf8, 0x01, 0xc8, 0x5e,
	0x3b, 0x71, 0x1c, 0x1b, 0x7a, 0x7c, 0xb3, 0x3b, 0x9e, 0x7d, 0x33, 0x23, 0xc3, 0x30, 0xdd, 0x2c,
	0x35, 0x85, 0xe1, 0x42, 0x6c, 0x75, 0x6c, 0x62, 0x7e, 0x0b, 0x83, 0xa7, 0x02, 0xc1, 0x0b, 0xe8,
	0x45, 0xe9, 0x66, 0x49, 0x9a, 0xb9, 0x53, 0x77, 0xe6, 0xcb, 0x62, 0xca, 0x70, 0x4d, 0x91, 0x21,
	0xc5, 0xbc, 0xa9, 0x3b, 0x1b, 0xc8, 0x62, 0xe2, 0xbf, 0x5d, 0xe8, 0x49, 0x5a, 0xc5, 0x5a, 0xe1,
	0x10, 0xbc, 0xb5, 0xca, 0x69, 0x5d, 0xe9, 0xad, 0x15, 0x9e, 0x43, 0x37, 0x31, 0x2a, 0x8a, 0x73,
	0x86, 0x2f, 0xed, 0x90, 0xa1, 0xdb, 0x70, 0xb1, 0x22, 0xd6, 0xb1, 0x68, 0x3e, 0x54, 0x64, 0x4f,
	0x0e, 0x64, 0x5f, 0x81, 0xff, 0x7d, 0x91, 0x48, 0x32, 0xa9, 0x8e, 0x58, 0x37, 0x57, 0xde, 0x03,
	0x18, 0xc0, 0x60, 0xa5, 0x69, 0x61, 0x68, 0x6e, 0x58, 0x6f, 0xea, 0xce, 0x3a, 0x72, 0x37, 0x67,
	0x67, 0x3a, 0xbf, 0x35, 0x37, 0xac, 0x6f, 0xcf, 0xca, 0x99, 0x23, 0x8c, 0x1e, 0xc8, 0xcc, 0xc3,
	0xf0, 0x69, 0xb3, 0x94, 0xf4, 0x23, 0xa5, 0xc4, 0xf0, 0x3b, 0x18, 0x5b, 0x2c, 0xcd, 0xb0, 0x64,
	0x1b, 0x47, 0x09, 0xe1, 0x5b, 0xf0, 0x4b, 0xaf, 0x12, 0xe6, 0x4e, 0x3b, 0xb3, 0xd3, 0x1b, 0x5f,
	0x94, 0x5e, 0xc9, 0xfd, 0x19, 0xff, 0x06, 0xa3, 0xfb, 0x58, 0xeb, 0xf8, 0xe7, 0x97, 0x88, 0x8a,
	0x2f, 0xee, 0xf7, 0x77, 0x1b, 0xf7, 0xf7, 0x9a, 0xf7, 0xef, 0x54, 0xf7, 0xe7, 0x13, 0x18, 0x57,
	0xbe, 0x6b, 0x5f, 0xc5, 0x5f, 0xc3, 0x0b, 0x6b, 0x40, 0xa9, 0x54, 0x73, 0x9e, 0x8f, 0x60, 0x58,
	0x5e, 0x28, 0x28, 0xd7, 0xc0, 0x1e, 0xc8, 0xd8, 0xa0, 0x92, 0xfb, 0x5f, 0x5f, 0xb3, 0xa7, 0xfc,
	0xf3, 0x9d, 0xfc, 0x23, 0x5c, 0x35, 0x30, 0x0a, 0x5f, 0xde, 0x40, 0x5f, 0xdb, 0x93, 0xc2, 0x95,
	0xbe, 0xb0, 0x37, 0x65, 0x89, 0xf3, 0x6b, 0xb8, 0xa8, 0xf2, 0x3f, 0xa7, 0x9b, 0x52, 0xaf, 0xa5,
	0x62, 0xfc, 0x0e, 0x2e, 0x8f, 0x18, 0xcf, 0xd7, 0x7b, 0x07, 0x38, 0x57, 0x6a, 0x97, 0xcd, 0x7f,
	0xb4, 0x5e, 0xc2, 0xe4, 0xe0, 0xb6, 0xd5, 0xb9, 0xf9, 0xe3, 0xc1, 0xc9, 0x23, 0x45, 0x0a, 0x3f,
	0x80, 0xbf, 0x6b, 0x08, 0x8e, 0x45, 0xbd, 0x2d, 0x01, 0x8a, 0xa3, 0xb2, 0x70, 0x27, 0x63, 0xed,
	0xd2, 0xc2, 0xb1, 0xa8, 0x37, 0x22, 0x40, 0x71, 0x1c, 0xa6, 0x83, 0x02, 0x7c, 0x9b, 0x56, 0xc6,
	0x1a, 0x8a, 0x83, 0x68, 0x83, 0x33, 0x51, 0x4b, 0xd2, 0xc1, 0x4f, 0x70, 0x56, 0xf3, 0x09, 0x2f,
	0x45, 0xb3, 0xd7, 0x01, 0x13, 0x2d, 0x96, 0x72, 0x07, 0x1f, 0xf3, 0xc6, 0x1f, 0x26, 0x8c, 0x57,
	0xa2, 0xad, 0x27, 0x41, 0x20, 0x5a, 0x0b, 0xc1, 0x1d, 0xbc, 0x85, 0xd3, 0x8a, 0xa3, 0x38, 0x11,
	0xc7, 0x69, 0x04, 0xe7, 0xa2, 0xc1, 0x74, 0xee, 0x2c, 0x7b, 0xf9, 0x7f, 0xe8, 0xfd, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0c, 0xd8, 0x17, 0xb4, 0x99, 0x04, 0x00, 0x00,
}
